pub mod solution {
	pub struct Result {
		smallest_count: usize,
		lowest_qe: usize
	}

	pub fn run() -> (usize, usize) {
		(part1_2(3010,3019), 0)
	}


	pub fn part1_2(rows: usize, cols: usize) -> (usize) {
		//let mut vec = vec![vec![0; cols*2]; rows*2];
		//vec[0][0] = 20151125;

		/* The first code is 20151125. 
		After that, each code is generated by taking the previous one, multiplying it by 252533, 
		and then keeping the remainder from dividing that value by 33554393.*/
		//let mut last = vec[0][0];
		let mut start_y = 1;
		let mut hit = false;
		let mut last = 20151125;

		while !hit {

			for x in 0..start_y+1 {
				let y = start_y - x;

				last  = (last * 252533) % 33554393;
				//println!("{:?} {:?} {:?}", last, y+1,x+1);

				if y+1 == rows && x+1 == cols {
				//	println!("hit {:?} {:?}", y+1,x+1);
					hit = true;
					break;
				}
			}


			start_y += 1;

			if start_y > cols * 10 {
				println!("bailing");
				break;
			}
		} 


		last
	}

	


	#[test]
	fn test_part_1() {
		//let p1 = part1(&initial, &"HOH");
		assert_eq!(part1_2(4,2), 32451966);
		assert_eq!(part1_2(6,5), 1534922);
		//assert_eq!(p2, 689);
	}
	
}

